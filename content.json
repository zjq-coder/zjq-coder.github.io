[{"title":"","date":"2017-05-30T00:43:37.648Z","path":"2017/05/30/前端分享续(1)/","raw":"6.����http���󣨺ϲ��ļ����ϲ�ͼƬ����\n�㶼ʹ����Щ���������Դ��������ܣ�\n\nProfiler, JSPerf��http:\nʲô�� FOUC������ʽ������˸���������������� FOUC��\n\n FOUC - Flash Of Unstyled Content �ĵ���ʽ��˸\n <styletype=\"text/css\"media=\"all\">@import\"../fouc.css\";</style> \n������CSS�ļ���@import�������������������������ס�IE���ȼ�������HTML�ĵ���DOM��Ȼ����ȥ�����ⲿ��CSS�ļ������ˣ���ҳ��DOM�������ɵ�CSS���������м�����һ��ʱ��ҳ���ϵ�������û����ʽ�ģ�����ʱ���ĳ��̸����٣������ٶȶ��й�ϵ��\n ���������򵥵ĳ��棬ֻҪ��<head>֮������һ��<link>����<script>Ԫ�ؾͿ����ˡ�\nnull��undefined��������\n\nnull��һ����ʾ\"��\"�Ķ�����תΪ��ֵʱΪ0��undefined��һ����ʾ\"��\"��ԭʼֵ��תΪ��ֵʱΪNaN��\n�������ı�����δ����ʼ��ʱ��������Ĭ��ֵΪundefined��\nnull������ʾ��δ���ڵĶ��󣬳�������ʾ������ͼ����һ�������ڵĶ�����\nundefined��ʾ\"ȱ��ֵ\"�����Ǵ˴�Ӧ����һ��ֵ�����ǻ�û�ж��塣�����÷��ǣ�\n��1�������������ˣ���û�и�ֵʱ���͵���undefined��\n\n��2) ���ú���ʱ��Ӧ���ṩ�Ĳ���û���ṩ���ò�������undefined��\n\n��3������û�и�ֵ�����ԣ������Ե�ֵΪundefined��\n\n��4������û�з���ֵʱ��Ĭ�Ϸ���undefined��\nnull��ʾ\"û�ж���\"�����ô���Ӧ����ֵ�������÷��ǣ�\n��1�� ��Ϊ�����Ĳ�������ʾ�ú����Ĳ������Ƕ�����\n\n��2�� ��Ϊ����ԭ�������յ㡣\nnew��������������ʲô��?\n\n1������һ���ն��󣬲��� this �������øö�����ͬʱ���̳��˸ú�����ԭ�͡�\n   2�����Ժͷ��������뵽 this ���õĶ����С�\n   3���´����Ķ����� this �����ã�����������ʽ�ķ��� this ��\n\nvar obj  = {};\nobj.__proto__ = Base.prototype;\nBase.call(obj); \nJSON ���˽⣿\n\nJSON(JavaScript Object Notation) ��һ�������������ݽ�����ʽ��\n���ǻ���JavaScript��һ���Ӽ������ݸ�ʽ����, ���ڶ�д, ռ�ô���С\n{'age':'12', 'name':'back'}\njs�ӳټ��صķ�ʽ����Щ��\n\ndefer��async����̬����DOM��ʽ������script�����뵽DOM�У��������Ϻ�callBack���������첽����js\n���ν�����������?\n\n    jsonp�� iframe��window.name��window.postMessage�������������ô���ҳ��\n\njsonp��ԭ���Ƕ�̬����script��ǩ\n�����μ�������js��������\ndocumen.write�� innerHTML������\n\ndocument.writeֻ���ػ�����ҳ��\n\ninnerHTML�����ػ�ҳ����һ����\n.call() �� .apply() �����������ã�\n\n���ã���̬�ı�ĳ������ĳ�����������л�����\n�����μ���JavaScriptѧϰ�ܽᣨ�ģ�function��������\n��Щ�����������ڴ�й©��\n\n�ڴ�й©ָ�κζ�����������ӵ�л���Ҫ��֮����Ȼ���ڡ�\n��������������ɨ�����󣬲�����������ÿ����������������������������һ����������������Ϊ 0��û�������������ù��ö��󣩣����Ըö�����Ωһ������ѭ���ģ���ô�ö������ڴ漴�ɻ��ա�\n\nsetTimeout �ĵ�һ������ʹ���ַ������Ǻ����Ļ����������ڴ�й©��\n�հ�������̨��־��ѭ���������������˴������ұ˴˱���ʱ���ͻ�����һ��ѭ����\n����������js���������������ڴ�\nJavaScript�е�����������������������\n\n����������JavaScript����ģʽ\n�����жϵ�ǰ�ű�����������������node�����У�\n\nͨ���ж�Global�����Ƿ�Ϊwindow��������Ϊwindow����ǰ�ű�û����������������\n�������⣿\n\n���������Ƚ��ѵļ��������ǣ��������ν����ģ���ʹ�õĿ�����Щ�����õ�ǰ�˿������ߣ�������ʲôӦ�û�������ҳ���ع���ô�������о�IE ��������������һ�������ԣ�99%����վ����Ҫ���ع����Ǳ�����д�ģ�ʲô�����Ž����ͽ�����ǿ��\n������cssѧϰ�����ܽᣨһ��\nWEBӦ�ôӷ�������������Data���ͻ�������Щ��ʽ����Node���ŵ���ȱ���������Լ��Ŀ�����\n*���ŵ㣩��ΪNode�ǻ����¼��������������ģ����Էǳ��ʺϴ�������������\n  ���˹�����Node�ϵĴ���������������������ʵ�֣���Ruby���ķ���������Ҫ�õöࡣ\n  ���⣬��Node���������������Ŀͻ��˴�������javascript���Ա�д�ģ�\n  ���˿ͻ��˺ͷ������˶���ͬһ�����Ա�д�����Ƿǳ����������顣\n\n*��ȱ�㣩Node��һ�������µĿ�Դ��Ŀ�����Բ�̫�ȶ���������һֱ�ڱ䣬\n  ����ȱ���㹻���ĵ�������֧�֡���������������Ruby/Rails���������ӡ�\n����ǰ�����⻹�˽�ʲô��������ô�������������ļ�����ʲô���㳣�õĿ���������ʲô��Ϊʲô������ȥ�أ���ǰ�˽��湤��ʦ����ְλ����ô�������ģ�����ǰ������ô����\nǰ�����������û��ĳ���Ա���Ⱥ��ˡ����ݿ⡢��Ʒ��������Ӫ����ȫ������\n    1��ʵ�ֽ��潻��\n    2�������û�����\n    3������Node.js��ǰ�˿���ʵ�ַ����˵�һЩ����\n\n\nǰ�����������û��ĳ���Ա��ǰ�˵������������ò�Ʒ�� 90�ֽ����� 100 �֣��������ã�\n\n ������Ŀ�����ٸ���������ʵ��Ч��ͼ����ȷ��1px��\n\n ���Ŷӳ�Ա��UI���ƣ���Ʒ�����Ĺ�ͨ��\n\n ���õ�ҳ���ṹ��ҳ���ع����û����飻\n\n ����hack�����ݡ�д�������Ĵ�����ʽ��\n\n ���Է��������Ż���ӵ������ǰ�˼�����\n�������ڵ��ŶӴ���ʲô���Ľ�ɫ��������ʲô���Ե����ã�����Ϊ��������ȫ�˹���ʦ��Full Stack developer��������һ��������������Ʒ�ɣ������ŵ���ʲô��ȱ����ʲô�����ι���ǰ���Ŷ�?������ѧʲô����̸̸��δ��3��5�����Լ��Ĺ滮����\n������Щ�����Ż��ķ�����\n\n�����Ż�14�������Ż�ԭ�򣩡�\n\n  ��1�� ����http����������CSSSprites, JS��CSSԴ��ѹ����ͼƬ��С���ƺ��ʣ���ҳGzip��CDN�йܣ�data���� ��ͼƬ��������\n\n  ��2�� ǰ��ģ�� JS+���ݣ���������HTML��ǩ���µĴ����˷ѣ�ǰ���ñ�������AJAX����������ÿ�β������ر������������󣬼�����������\n\n  ��3�� ��innerHTML����DOM����������DOM�����������Ż�javascript���ܡ�\n\n  ��4�� ����Ҫ���õ���ʽ�ܶ�ʱ����className������ֱ�Ӳ���style��\n\n  ��5�� ����ȫ�ֱ���������DOM�ڵ����ҵĽ���������IO��ȡ������\n\n  ��6�� ����ʹ��CSSExpression��css����ʽ)�ֳ�Dynamic properties(��̬����)��\n\n  ��7�� ͼƬԤ���أ�����ʽ�����ڶ��������ű����ڵײ�  ����ʱ������\nhttp״̬������Щ���ֱ�������ʲô��˼��\n\n100-199 ����ָ���ͻ���Ӧ��Ӧ��ĳЩ������ \n200-299 ���ڱ�ʾ�����ɹ��� \n300-399 �����Ѿ��ƶ����ļ����ҳ��������ڶ�λͷ��Ϣ��ָ���µĵ�ַ��Ϣ�� \n400-499 ����ָ���ͻ��˵Ĵ�����400    1���������󣬵�ǰ�����޷������������⡣401   ��ǰ������Ҫ�û���֤ 403  �������Ѿ��������󣬵��Ǿܾ�ִ������\n500-599 ����֧�ַ����������� 503 �C ���񲻿���\nһ��ҳ�������� URL ��ҳ��������ʾ���ɣ����������ж�������ʲô��\n\n �������������� \n    DNS���������Ҹ�������Ӧ��IP��ַ���ض�����301���������ڶ���GET����\n    ����HTTPЭ���Ự\n    �ͻ��˷��ͱ�ͷ(������ͷ)\n    ������������ͷ(��Ӧ��ͷ)\n    html�ĵ���ʼ����\n    �ĵ������������ݱ�����������ָ��MIME���͵��ļ�\n    �ļ���ʾ\n    {\n    �������������Ĺ������·�Ϊ���¼�����\n\n    ���أ�����������URL�����������������������������󣬽����ļ���HTML��JS��CSS��ͼ���ȣ���\n\n    �������Լ��ص�����Դ��HTML��JS��CSS�ȣ������﷨������������Ӧ���ڲ����ݽṹ������HTML��DOM����JS�ģ����������Ա���CSS����ʽ�����ȵȣ�\n    }\nƽʱ���ι���������Ŀ��\n\n�����Ŷӱ���ȷ����ȫ����ʽ��globe.css��������ģʽ(utf-8) �ȣ�\n\n        ��дϰ�߱���һ�£����綼�ǲ��ü̳�ʽ��д��������ʽ��д��һ�У���\n\n        ��ע��ʽ��д�ˣ���ģ�鶼��ʱ��ע����ע�ؼ���ʽ���õĵط�����\n\n        ҳ�����б�ע������ ҳ�� ģ�� ��ʼ�ͽ�������\n\n        CSS��HTML ���ļ��в��д��ţ���������ͳһ������style.css����\n\n        JS ���ļ��д��� �����Ը�JS����Ϊ׼��Ӣ�ķ��롣\n\n        ͼƬ�������ϵ� images.png png8 ��ʽ�ļ�ʹ�� ����������һ��ʹ�÷��㽫���Ĺ��� \n˵˵���������е�һЩ�����ɣ���ȥ��Щ��վ��\n\nNode.js��Mongodb��npm��MVVM��MEAN��three.js,React ��\n��վ��w3cfuns,sf,hacknews,CSDN,Ľ�Σ�����԰��InfoQ,w3cplus��\njavascript�����ļ��ִ�����ʽ\n\n1������ģʽ\n2�����캯��ģʽ\n3��ԭ��ģʽ\n4�����Ϲ��캯����ԭ��ģʽ\n5����̬ԭ��ģʽ\n6���������캯��ģʽ\n7�����׹��캯��ģʽ\njavascript�̳е�6�ַ���\n\n1��ԭ�����̳�\n2�����ù��캯���̳�\n3�����ϼ̳�(ԭ��+���ù���)\n4��ԭ��ʽ�̳�\n5������ʽ�̳�\n6����������ʽ�̳�\najax����\n\n(1)����XMLHttpRequest����,Ҳ���Ǵ���һ���첽���ö���.\n\n(2)����һ���µ�HTTP����,��ָ����HTTP�����ķ�����URL����֤��Ϣ.\n\n(3)������ӦHTTP����״̬�仯�ĺ���.\n\n(4)����HTTP����.\n\n(5)��ȡ�첽���÷��ص�����.\n\n(6)ʹ��JavaScript��DOMʵ�־ֲ�ˢ��.\n�첽���غ��ӳټ���\n\n1.�첽���صķ����� ��̬����script��ǩ\n2.ͨ��ajaxȥ��ȡjs���룬Ȼ��ͨ��evalִ��\n3.script��ǩ������defer����async����\n4.����������iframe�������첽ִ��js\n5.�ӳټ��أ���Щ js ���벢����ҳ����ʼ����ʱ����������Ҫ�ģ����Ժ���ĳЩ��������Ҫ�ġ�\nǰ�˰�ȫ���⣿\n\n    ��XSS��sqlע�룬CSRF��\nCSRF���ǿ�վ����α�죬�����Ը��ݸոյĽ��ͣ����ĺ���Ҳ��������α�죬ͨ��α�������ύPOST��GET���������п����Ĺ�����\n\n**����CSRF��Ҫ�������裺**\n\n1.��½�����ε���վA���ڱ�������COOKIE\n\n2.�ڲ��ǳ�A�������£����߱���COOKIEû�й��ڵ������£�����Σ����վB��\nie���汾��chrome���Բ������ض��ٸ���Դ\n\nIE6 ����������iE7����֮����6��������֮���汾Ҳ��6��\n\nFirefox��chromeҲ��6��\njavascript�����ļ̳���ôʵ�֣����α���ԭ���������Ķ�������\n\n�ù��캯����ԭ�����Ļ���ģʽȥʵ�ּ̳У����������������Բο�������extend()�������ܶ�ǰ�˿��ܶ��з�װ�ģ�������һ���պ��������м�����\ngrunt�� YUI compressor �� google clojure�������д���ѹ�����÷���\n\nYUI Compressor ��һ������ѹ�� JS �� CSS �ļ��Ĺ��ߣ�����Java������\n\nʹ�÷�����\n\n//ѹ��JS\njava -jar yuicompressor-2.4.2.jar --type js --charset utf-8-v src.js > packed.js\n//ѹ��CSS\njava -jar yuicompressor-2.4.2.jar --type css --charset utf-8-v src.css > packed.css\nFlash��Ajax���Ե���ȱ�㣬��ʹ��������ȡ�᣿\n\n1��Flash ajax�Ա�\nFlash�ʺϴ�����ý�塢ʸ��ͼ�Ρ����ʻ�������CSS�������ı��ϲ��㣬�����ױ�������\nAjax��CSS���ı�֧�ֺܺã�֧����������ý�塢ʸ��ͼ�Ρ��������ʲ��㡣\n��ͬ�㣺������������ˢ�´�����Ϣ���û����ߺ�����״̬������DOM\nGET��POST�����𣬺�ʱʹ��POST��\n\nGET��һ��������Ϣ��ȡ��ʹ��URL���ݲ���������������Ϣ������Ҳ�����ƣ�һ����2000���ַ�\n    POST��һ�������޸ķ������ϵ���Դ���������͵���Ϣû�����ơ�\n\n    GET��ʽ��Ҫʹ��Request.QueryString��ȡ�ñ�����ֵ����POST��ʽͨ��Request.Form����ȡ������ֵ��\n    Ҳ����˵Get��ͨ����ַ������ֵ����Post��ͨ���ύ��������ֵ��\n\nȻ���������������У���ʹ�� POST ������\n�޷�ʹ�û����ļ������·������ϵ��ļ������ݿ⣩\n�����������ʹ������ݣ�POST û�����������ƣ�\n���Ͱ���δ֪�ַ����û�����ʱ��POST �� GET ���ȶ�Ҳ���ɿ�\n","content":"<p>6.����http���󣨺ϲ��ļ����ϲ�ͼƬ����<br>�㶼ʹ����Щ���������Դ��������ܣ�</p>\n<p>Profiler, JSPerf��http:<br>ʲô�� FOUC������ʽ������˸���������������� FOUC��</p>\n<p> FOUC - Flash Of Unstyled Content �ĵ���ʽ��˸<br> <styletype=\"text css\"media=\"all\">@import”../fouc.css”;<br>������CSS�ļ���@import�������������������������ס�IE���ȼ�������HTML�ĵ���DOM��Ȼ����ȥ�����ⲿ��CSS�ļ������ˣ���ҳ��DOM�������ɵ�CSS���������м�����һ��ʱ��ҳ���ϵ�������û����ʽ�ģ�����ʱ���ĳ��̸����٣������ٶȶ��й�ϵ��<br> ���������򵥵ĳ��棬ֻҪ��<head>֮������һ��<link>����<script>Ԫ�ؾͿ����ˡ�<br>null��undefined��������</p>\n<p>null��һ����ʾ”��”�Ķ�����תΪ��ֵʱΪ0��undefined��һ����ʾ”��”��ԭʼֵ��תΪ��ֵʱΪNaN��<br>�������ı�����δ����ʼ��ʱ��������Ĭ��ֵΪundefined��<br>null������ʾ��δ���ڵĶ��󣬳�������ʾ������ͼ����һ�������ڵĶ�����<br>undefined��ʾ”ȱ��ֵ”�����Ǵ˴�Ӧ����һ��ֵ�����ǻ�û�ж��塣�����÷��ǣ�<br>��1�������������ˣ���û�и�ֵʱ���͵���undefined��</p>\n<p>��2) ���ú���ʱ��Ӧ���ṩ�Ĳ���û���ṩ���ò�������undefined��</p>\n<p>��3������û�и�ֵ�����ԣ������Ե�ֵΪundefined��</p>\n<p>��4������û�з���ֵʱ��Ĭ�Ϸ���undefined��<br>null��ʾ”û�ж���”�����ô���Ӧ����ֵ�������÷��ǣ�<br>��1�� ��Ϊ�����Ĳ�������ʾ�ú����Ĳ������Ƕ�����</p>\n<p>��2�� ��Ϊ����ԭ�������յ㡣<br>new��������������ʲô��?</p>\n<p>1������һ���ն��󣬲��� this �������øö�����ͬʱ���̳��˸ú�����ԭ�͡�<br>   2�����Ժͷ��������뵽 this ���õĶ����С�<br>   3���´����Ķ����� this �����ã�����������ʽ�ķ��� this ��</p>\n<p>var obj  = {};<br>obj.<strong>proto</strong> = Base.prototype;<br>Base.call(obj);<br>JSON ���˽⣿</p>\n<p>JSON(JavaScript Object Notation) ��һ�������������ݽ�����ʽ��<br>���ǻ���JavaScript��һ���Ӽ������ݸ�ʽ����, ���ڶ�д, ռ�ô���С<br>{‘age’:’12’, ‘name’:’back’}<br>js�ӳټ��صķ�ʽ����Щ��</p>\n<p>defer��async����̬����DOM��ʽ������script�����뵽DOM�У��������Ϻ�callBack���������첽����js<br>���ν�����������?</p>\n<pre><code>jsonp�� iframe��window.name��window.postMessage�������������ô���ҳ��\n</code></pre><p>jsonp��ԭ���Ƕ�̬����script��ǩ<br>�����μ�������js��������<br>documen.write�� innerHTML������</p>\n<p>document.writeֻ���ػ�����ҳ��</p>\n<p>innerHTML�����ػ�ҳ����һ����<br>.call() �� .apply() �����������ã�</p>\n<p>���ã���̬�ı�ĳ������ĳ�����������л�����<br>�����μ���JavaScriptѧϰ�ܽᣨ�ģ�function��������<br>��Щ�����������ڴ�й©��</p>\n<p>�ڴ�й©ָ�κζ�����������ӵ�л���Ҫ��֮����Ȼ���ڡ�<br>��������������ɨ�����󣬲�����������ÿ����������������������������һ����������������Ϊ 0��û�������������ù��ö��󣩣����Ըö�����Ωһ������ѭ���ģ���ô�ö������ڴ漴�ɻ��ա�</p>\n<p>setTimeout �ĵ�һ������ʹ���ַ������Ǻ����Ļ����������ڴ�й©��<br>�հ�������̨��־��ѭ���������������˴������ұ˴˱���ʱ���ͻ�����һ��ѭ����<br>����������js���������������ڴ�<br>JavaScript�е�����������������������</p>\n<p>����������JavaScript����ģʽ<br>�����жϵ�ǰ�ű�����������������node�����У�</p>\n<p>ͨ���ж�Global�����Ƿ�Ϊwindow��������Ϊwindow����ǰ�ű�û����������������<br>�������⣿</p>\n<p>���������Ƚ��ѵļ��������ǣ��������ν����ģ���ʹ�õĿ�����Щ�����õ�ǰ�˿������ߣ�������ʲôӦ�û�������ҳ���ع���ô�������о�IE ��������������һ�������ԣ�99%����վ����Ҫ���ع����Ǳ�����д�ģ�ʲô�����Ž����ͽ�����ǿ��<br>������cssѧϰ�����ܽᣨһ��<br>WEBӦ�ôӷ�������������Data���ͻ�������Щ��ʽ����Node���ŵ���ȱ���������Լ��Ŀ�����<br>*���ŵ㣩��ΪNode�ǻ����¼��������������ģ����Էǳ��ʺϴ�������������<br>  ���˹�����Node�ϵĴ���������������������ʵ�֣���Ruby���ķ���������Ҫ�õöࡣ<br>  ���⣬��Node���������������Ŀͻ��˴�������javascript���Ա�д�ģ�<br>  ���˿ͻ��˺ͷ������˶���ͬһ�����Ա�д�����Ƿǳ����������顣</p>\n<p>*��ȱ�㣩Node��һ�������µĿ�Դ��Ŀ�����Բ�̫�ȶ���������һֱ�ڱ䣬<br>  ����ȱ���㹻���ĵ�������֧�֡���������������Ruby/Rails���������ӡ�<br>����ǰ�����⻹�˽�ʲô��������ô�������������ļ�����ʲô���㳣�õĿ���������ʲô��Ϊʲô������ȥ�أ���ǰ�˽��湤��ʦ����ְλ����ô�������ģ�����ǰ������ô����<br>ǰ�����������û��ĳ���Ա���Ⱥ��ˡ����ݿ⡢��Ʒ��������Ӫ����ȫ������<br>    1��ʵ�ֽ��潻��<br>    2�������û�����<br>    3������Node.js��ǰ�˿���ʵ�ַ����˵�һЩ����</p>\n<p>ǰ�����������û��ĳ���Ա��ǰ�˵������������ò�Ʒ�� 90�ֽ����� 100 �֣��������ã�</p>\n<p> ������Ŀ�����ٸ���������ʵ��Ч��ͼ����ȷ��1px��</p>\n<p> ���Ŷӳ�Ա��UI���ƣ���Ʒ�����Ĺ�ͨ��</p>\n<p> ���õ�ҳ���ṹ��ҳ���ع����û����飻</p>\n<p> ����hack�����ݡ�д�������Ĵ�����ʽ��</p>\n<p> ���Է��������Ż���ӵ������ǰ�˼�����<br>�������ڵ��ŶӴ���ʲô���Ľ�ɫ��������ʲô���Ե����ã�����Ϊ��������ȫ�˹���ʦ��Full Stack developer��������һ��������������Ʒ�ɣ������ŵ���ʲô��ȱ����ʲô�����ι���ǰ���Ŷ�?������ѧʲô����̸̸��δ��3��5�����Լ��Ĺ滮����<br>������Щ�����Ż��ķ�����</p>\n<p>�����Ż�14�������Ż�ԭ�򣩡�</p>\n<p>  ��1�� ����http����������CSSSprites, JS��CSSԴ��ѹ����ͼƬ��С���ƺ��ʣ���ҳGzip��CDN�йܣ�data���� ��ͼƬ��������</p>\n<p>  ��2�� ǰ��ģ�� JS+���ݣ���������HTML��ǩ���µĴ����˷ѣ�ǰ���ñ�������AJAX����������ÿ�β������ر������������󣬼�����������</p>\n<p>  ��3�� ��innerHTML����DOM����������DOM�����������Ż�javascript���ܡ�</p>\n<p>  ��4�� ����Ҫ���õ���ʽ�ܶ�ʱ����className������ֱ�Ӳ���style��</p>\n<p>  ��5�� ����ȫ�ֱ���������DOM�ڵ����ҵĽ���������IO��ȡ������</p>\n<p>  ��6�� ����ʹ��CSSExpression��css����ʽ)�ֳ�Dynamic properties(��̬����)��</p>\n<p>  ��7�� ͼƬԤ���أ�����ʽ�����ڶ��������ű����ڵײ�  ����ʱ������<br>http״̬������Щ���ֱ�������ʲô��˼��</p>\n<p>100-199 ����ָ���ͻ���Ӧ��Ӧ��ĳЩ������<br>200-299 ���ڱ�ʾ�����ɹ���<br>300-399 �����Ѿ��ƶ����ļ����ҳ��������ڶ�λͷ��Ϣ��ָ���µĵ�ַ��Ϣ��<br>400-499 ����ָ���ͻ��˵Ĵ�����400    1���������󣬵�ǰ�����޷������������⡣401   ��ǰ������Ҫ�û���֤ 403  �������Ѿ��������󣬵��Ǿܾ�ִ������<br>500-599 ����֧�ַ����������� 503 �C ���񲻿���<br>һ��ҳ�������� URL ��ҳ��������ʾ���ɣ����������ж�������ʲô��</p>\n<p> ��������������<br>    DNS���������Ҹ�������Ӧ��IP��ַ���ض�����301���������ڶ���GET����<br>    ����HTTPЭ���Ự<br>    �ͻ��˷��ͱ�ͷ(������ͷ)<br>    ������������ͷ(��Ӧ��ͷ)<br>    html�ĵ���ʼ����<br>    �ĵ������������ݱ�����������ָ��MIME���͵��ļ�<br>    �ļ���ʾ<br>    {<br>    �������������Ĺ������·�Ϊ���¼�����</p>\n<pre><code>���أ�����������URL�����������������������������󣬽����ļ���HTML��JS��CSS��ͼ���ȣ���\n\n�������Լ��ص�����Դ��HTML��JS��CSS�ȣ������﷨������������Ӧ���ڲ����ݽṹ������HTML��DOM����JS�ģ����������Ա���CSS����ʽ�����ȵȣ�\n}\n</code></pre><p>ƽʱ���ι���������Ŀ��</p>\n<p>�����Ŷӱ���ȷ����ȫ����ʽ��globe.css��������ģʽ(utf-8) �ȣ�</p>\n<pre><code>��дϰ�߱���һ�£����綼�ǲ��ü̳�ʽ��д��������ʽ��д��һ�У���\n\n��ע��ʽ��д�ˣ���ģ�鶼��ʱ��ע����ע�ؼ���ʽ���õĵط�����\n\nҳ�����б�ע������ ҳ�� ģ�� ��ʼ�ͽ�������\n\nCSS��HTML ���ļ��в��д��ţ���������ͳһ������style.css����\n\nJS ���ļ��д��� �����Ը�JS����Ϊ׼��Ӣ�ķ��롣\n\nͼƬ�������ϵ� images.png png8 ��ʽ�ļ�ʹ�� ����������һ��ʹ�÷��㽫���Ĺ��� \n</code></pre><p>˵˵���������е�һЩ�����ɣ���ȥ��Щ��վ��</p>\n<p>Node.js��Mongodb��npm��MVVM��MEAN��three.js,React ��<br>��վ��w3cfuns,sf,hacknews,CSDN,Ľ�Σ�����԰��InfoQ,w3cplus��<br>javascript�����ļ��ִ�����ʽ</p>\n<p>1������ģʽ<br>2�����캯��ģʽ<br>3��ԭ��ģʽ<br>4�����Ϲ��캯����ԭ��ģʽ<br>5����̬ԭ��ģʽ<br>6���������캯��ģʽ<br>7�����׹��캯��ģʽ<br>javascript�̳е�6�ַ���</p>\n<p>1��ԭ�����̳�<br>2�����ù��캯���̳�<br>3�����ϼ̳�(ԭ��+���ù���)<br>4��ԭ��ʽ�̳�<br>5������ʽ�̳�<br>6����������ʽ�̳�<br>ajax����</p>\n<p>(1)����XMLHttpRequest����,Ҳ���Ǵ���һ���첽���ö���.</p>\n<p>(2)����һ���µ�HTTP����,��ָ����HTTP�����ķ�����URL����֤��Ϣ.</p>\n<p>(3)������ӦHTTP����״̬�仯�ĺ���.</p>\n<p>(4)����HTTP����.</p>\n<p>(5)��ȡ�첽���÷��ص�����.</p>\n<p>(6)ʹ��JavaScript��DOMʵ�־ֲ�ˢ��.<br>�첽���غ��ӳټ���</p>\n<p>1.�첽���صķ����� ��̬����script��ǩ<br>2.ͨ��ajaxȥ��ȡjs���룬Ȼ��ͨ��evalִ��<br>3.script��ǩ������defer����async����<br>4.����������iframe�������첽ִ��js<br>5.�ӳټ��أ���Щ js ���벢����ҳ����ʼ����ʱ����������Ҫ�ģ����Ժ���ĳЩ��������Ҫ�ġ�<br>ǰ�˰�ȫ���⣿</p>\n<pre><code>��XSS��sqlע�룬CSRF��\n</code></pre><p>CSRF���ǿ�վ����α�죬�����Ը��ݸոյĽ��ͣ����ĺ���Ҳ��������α�죬ͨ��α�������ύPOST��GET���������п����Ĺ�����</p>\n<p><strong>����CSRF��Ҫ�������裺</strong></p>\n<p>1.��½�����ε���վA���ڱ�������COOKIE</p>\n<p>2.�ڲ��ǳ�A�������£����߱���COOKIEû�й��ڵ������£�����Σ����վB��<br>ie���汾��chrome���Բ������ض��ٸ���Դ</p>\n<p>IE6 ����������iE7����֮����6��������֮���汾Ҳ��6��</p>\n<p>Firefox��chromeҲ��6��<br>javascript�����ļ̳���ôʵ�֣����α���ԭ���������Ķ�������</p>\n<p>�ù��캯����ԭ�����Ļ���ģʽȥʵ�ּ̳У����������������Բο�������extend()�������ܶ�ǰ�˿��ܶ��з�װ�ģ�������һ���պ��������м�����<br>grunt�� YUI compressor �� google clojure�������д���ѹ�����÷���</p>\n<p>YUI Compressor ��һ������ѹ�� JS �� CSS �ļ��Ĺ��ߣ�����Java������</p>\n<p>ʹ�÷�����</p>\n<p>//ѹ��JS<br>java -jar yuicompressor-2.4.2.jar –type js –charset utf-8-v src.js &gt; packed.js<br>//ѹ��CSS<br>java -jar yuicompressor-2.4.2.jar –type css –charset utf-8-v src.css &gt; packed.css<br>Flash��Ajax���Ե���ȱ�㣬��ʹ��������ȡ�᣿</p>\n<p>1��Flash ajax�Ա�<br>Flash�ʺϴ�����ý�塢ʸ��ͼ�Ρ����ʻ�������CSS�������ı��ϲ��㣬�����ױ�������<br>Ajax��CSS���ı�֧�ֺܺã�֧����������ý�塢ʸ��ͼ�Ρ��������ʲ��㡣<br>��ͬ�㣺������������ˢ�´�����Ϣ���û����ߺ�����״̬������DOM<br>GET��POST�����𣬺�ʱʹ��POST��</p>\n<p>GET��һ��������Ϣ��ȡ��ʹ��URL���ݲ���������������Ϣ������Ҳ�����ƣ�һ����2000���ַ�<br>    POST��һ�������޸ķ������ϵ���Դ���������͵���Ϣû�����ơ�</p>\n<pre><code>GET��ʽ��Ҫʹ��Request.QueryString��ȡ�ñ�����ֵ����POST��ʽͨ��Request.Form����ȡ������ֵ��\nҲ����˵Get��ͨ����ַ������ֵ����Post��ͨ���ύ��������ֵ��\n</code></pre><p>Ȼ���������������У���ʹ�� POST ������<br>�޷�ʹ�û����ļ������·������ϵ��ļ������ݿ⣩<br>�����������ʹ������ݣ�POST û�����������ƣ�<br>���Ͱ���δ֪�ַ����û�����ʱ��POST �� GET ���ȶ�Ҳ���ɿ�</p>\n</script></head></styletype=\"text></p>","tags":[]},{"title":"github搭建博客优点","date":"2016-07-22T07:08:32.000Z","path":"2016/07/22/my-first-blog/","raw":"---\ntitle: github搭建博客优点\ndate: 2016-07-22 15:08:32\ncategories:\ntags:\n     - 黑魔法\n     - 奇淫技巧\n---\n使用github pages服务搭建博客的好处有：\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"50\" width=300 height=86 src=\"//music.163.com/outchain/player?type=2&id=27676089&auto=1&height=66\"></iframe>\n1. 全是静态文件，访问速度快；\n<!--more-->\n2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；\n3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；\n\n\n\n4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；\n5. 博客内容可以轻松打包、转移、发布到其它平台；\n6. 等等；\n\n\n\n\n","content":"<p>使用github pages服务搭建博客的好处有：</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"50\" width=\"300\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=27676089&auto=1&height=66\"></iframe></p>\n<ol>\n<li>全是静态文件，访问速度快；<a id=\"more\"></a></li>\n<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>\n<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>\n</ol>\n<ol>\n<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>\n<li>博客内容可以轻松打包、转移、发布到其它平台；</li>\n<li>等等；</li>\n</ol>\n","tags":[{"name":"黑魔法","slug":"黑魔法","permalink":"http://yoursite.com/tags/黑魔法/"},{"name":"奇淫技巧","slug":"奇淫技巧","permalink":"http://yoursite.com/tags/奇淫技巧/"}]},{"title":"前端学习分享","date":"2016-07-11T16:00:00.000Z","path":"2016/07/12/前端分享(1)/","raw":"---\ntitle: 前端学习分享\ndate: 2016/07/12\ncategories:\ntags:\n     - cookies\n     - 前端\n---\n\n####  前端学习分享\n\n1.谈谈Cookie的弊端\n\ncookie虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的。\n<!--more-->\n第一：每个特定的域名下最多生成20个cookie\n1.IE6或更低版本最多20个cookie\n2.IE7和之后的版本最后可以有50个cookie。\n3.Firefox最多50个cookie\n4.chrome和Safari没有做硬性限制\nIE和Opera 会清理近期最少使用的cookie，Firefox会随机清理cookie。\n\n<!--more-->\n\ncookie的最大大约为4096字节，为了兼容性，一般不能超过4095字节。\nIE 提供了一种存储可以持久化用户数据，叫做uerData，从IE5.0就开始支持。每个数据最多128K，每个域名下最多1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。\n优点：极高的扩展性和可用性\n1.通过良好的编程，控制保存在cookie中的session对象的大小。\n2.通过加密和安全传输技术（SSL），减少cookie被破解的可能性。\n3.只在cookie中存放不敏感数据，即使被盗也不会有重大损失。\n4.控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。\n\n\n\n缺点：\n1.`Cookie`数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。\n\n2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。\n\n3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。\n2.浏览器本地存储\n\n在较高版本的浏览器中，js提供了sessionStorage和globalStorage。在HTML5中提供了localStorage来取代globalStorage。\nhtml5中的Web Storage包括了两种存储方式：sessionStorage和localStorage。\nsessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。\n而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n3.web storage和cookie的区别\n\nWeb Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。\n除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。\n但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生\n浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。\nlocalStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等\nCSS 相关问题\n\ndisplay:none和visibility:hidden的区别？\ndisplay:none  隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，\n就当他从来不存在。\n\nvisibility:hidden  隐藏对应的元素，但是在文档布局中仍保留原来的空间。\nCSS中 link 和@import 的区别是？\nA：(1) link属于HTML标签，而@import是CSS提供的; (2) 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;(3) import只在IE5以上才能识别，而link是HTML标签，无兼容问题; (4) link方式的样式的权重 高于@import的权重.\nposition的absolute与fixed共同点与不同点\nA：共同点：\n1.改变行内元素的呈现方式，display被置为block；2.让元素脱离普通流，不占据空间；3.默认会覆盖到非定位元素上\n\nB不同点：\nabsolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。  \n介绍一下CSS的盒子模型？\n1）有两种， IE 盒子模型、标准 W3C 盒子模型；IE的content部分包含了 border 和 pading;\n\n2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).\nCSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？\n   *   1.id选择器（ \n        2.类选择器（.myclassname）\n        3.标签选择器（div, h1, p）\n        4.相邻选择器（h1 + p）\n        5.子选择器（ul < li）\n        6.后代选择器（li a）\n        7.通配符选择器（ * ）\n        8.属性选择器（a[rel = \"external\"]）\n        9.伪类选择器（a: hover, li: nth - child）\n\n    *   可继承的样式： font-size font-family color, ULLIDLDDDT;\n\n    *   不可继承的样式：border padding margin width height ;\n\n    *   优先级就近原则，同权重情况下样式定义最近者为准;\n\n    *   载入样式以最后载入的定位为准;\n\n优先级为:\n\n\n   !important >  id > class > tag  \n\n   important 比 内联优先级高\n\nCSS3新增伪类举例：\n\n\np:first-of-type 选择属于其父元素的首个 \n 元素的每个 \n 元素。p:last-of-type  选择属于其父元素的最后 \n 元素的每个 \n 元素。p:only-of-type  选择属于其父元素唯一的 \n 元素的每个 \n 元素。p:only-child    选择属于其父元素的唯一子元素的每个 \n 元素。\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 \n 元素。\n:enabled  :disabled 控制表单控件的禁用状态。\n:checked        单选框或复选框被选中。\n列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？\n1.   \n  block 象块类型元素一样显示。\n  none 缺省值。象行内元素类型一样显示。\n  inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。\n  list-item 象块类型元素一样显示，并添加样式列表标记。\n\n  2. \n  *absolute \n        生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。 \n\n  *fixed （老IE不支持）\n        生成绝对定位的元素，相对于浏览器窗口进行定位。 \n\n  *relative \n        生成相对定位的元素，相对于其正常位置进行定位。 \n\n  * static  默认值。没有定位，元素出现在正常的流中\n  *（忽略 top, bottom, left, rightz-index 声明）。\n\n  * inherit 规定从父元素继承 position 属性的值。\nCSS3有哪些新特性？\nCSS3实现圆角（border-radius:8px），阴影（box-shadow:10px），\n  对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）\n  transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);\n  增加了更多的CSS选择器  多背景 rgba \n对BFC规范的理解？\n BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。   \n（W3C CSS 2.1 规范中的一个概念,它决定了元素如何对其内容进行定位,以及与其他元素的关 系和相互作用。）\n解释下 CSS sprites，以及你要如何在页面或网站中使用它。\nCSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片的位置。\nhtml部分\n\n说说你对语义化的理解？\n用正确的标签做正确的事情！\nhtml语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；\n在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。\n搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\nDoctype作用? 严格模式与混杂模式如何区分？它们有何意义?\n（1）、<!DOCTYPE> 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。 \n\n（2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。\n\n（3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。\n\n（4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。   \n你知道多少种Doctype文档类型？\n 该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。\n HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。\n XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。\nStandards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks\n （包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。\nHTML与XHTML——二者有什么区别\n\n区别：\n1.所有的标记都必须要有一个相应的结束标记\n2.所有标签的元素和属性的名字都必须使用小写\n3.所有的XML标记都必须合理嵌套\n4.所有的属性必须用引号\"\"括起来\n5.把所有<和&特殊符号用编码表示\n6.给所有属性赋一个值\n7.不要在注释内容中使“--”8.图片必须有说明文字\n常见兼容性问题？\n\n* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。 \n\n* 浮动ie产生的双倍距离（IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。）\n  #box{ float:left; width:10px; margin:000100px;} \n\n 这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)\n\n*  渐进识别的方式，从总体中逐渐排除局部。 \n\n  首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。 \n  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  css.bb{\n       background-color:#f1ee18;\n      .background-color:#00deff\\9; \n      +background-color:#a200ff;\n      _background-color:#1e0bd1; \n      } \n\n*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n   也可以使用getAttribute()获取自定义属性;\n   Firefox下,只能使用getAttribute()获取自定义属性. \n   解决方法:统一通过getAttribute()获取自定义属性.\n\n* IE下,event对象有x,y属性,但是没有pageX,pageY属性; \n  Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.\n\n* 解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n* Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, \n  可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.\n\n* 超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\nL-V-H-A :  a:link{}a:visited{}a:hover{}a:active{}\n\n* 怪异模式问题：漏写DTD声明，Firefox仍然会按照标准模式来解析网页，但在IE中会触发怪异模式。为避免怪异模式给我们带来不必要的麻烦，最好养成书写DTD声明的好习惯。\n\n* 上下margin重合问题\nie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。\n解决方法，养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。\n* ie6对png图片格式支持不好(引用一段脚本处理)\n解释下浮动和它的工作原理？清除浮动的技巧\n浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。\n\n1.使用空标签清除浮动。\n   这种方法是在所有浮动标签后面添加一个空标签 定义cssclear:both. 弊端就是增加了无意义标签。\n2.使用overflow。\n   给包含浮动元素的父标签添加css属性 overflow:auto; zoom:1; zoom:1用于兼容IE6。\n3.使用after伪对象清除浮动。\n   该方法只适用于非IE浏览器。具体写法可参照以下示例。使用中需注意以下几点。一、该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；\n浮动元素引起的问题和解决办法？\n浮动元素引起的问题：\n（1）父元素的高度无法被撑开，影响与父元素同级的元素\n（2）与浮动元素同级的非浮动元素会跟随其后\n（3）若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构\n解决方法：\n使用CSS中的clear:both;属性来清除元素的浮动可解决2、3问题，对于问题1，添加如下样式，给父元素添加clearfix样式：\n.clearfix:after{content:\".\";display: block;height:0;clear: both;visibility: hidden;}.clearfix{display: inline-block;}\n清除浮动的几种方法：\n1，额外标签法，<divstyle=\"clear:both;\">\n（缺点：不过这个办法会增加额外的标签使HTML结构看起来不够简洁。）2，使用after伪类 content:\".\"; height:0; visibility:hidden; display:block; clear:both; }3,浮动外部元素4,设置`overflow`为`hidden`或者autoIE 8以下版本的浏览器中的盒模型有什么不同\nIE8以下浏览器的盒模型中定义的元素的宽高不包括内边距和边框\nDOM操作——怎样添加、移除、移动、复制、创建和查找节点。\n（1）创建新节点\n\n      createDocumentFragment()createElement()createTextNode()   \n\n（2）添加、移除、替换、插入\n\n      appendChild()removeChild()replaceChild()insertBefore() \n\n（3）查找\n\n      getElementsByTagName()getElementsByName()getElementById()\nhtml5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n\n* 绘画 canvas  \n  用于媒介回放的 video 和 audio 元素 \n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\n  sessionStorage 的数据在浏览器关闭后自动删除\n\n  语意化更好的内容元素，比如 article、footer、header、nav、section \n  表单控件，calendar、date、time、email、url、search  \n  新的技术webworker, websockt, Geolocation\n\n* 移除的元素\n\n纯表现的元素：basefont，big，center，font, s，strike，tt，u；\n\n对可用性产生负面影响的元素：frame，frameset，noframes；\n\n支持HTML5新标签：\n\n* IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n  可以利用这一特性让这些浏览器支持HTML5新标签，\n\n  浏览器支持新标签后，还需要添加标签默认的样式：\n\n* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架\n\n如何区分： DOCTYPE声明\\新增的结构元素\\功能元素\niframe的优缺点？\n\n1.<iframe>优点：\n\n    解决加载缓慢的第三方内容如图标和广告等的加载问题\n    Security sandbox\n    并行加载脚本\n\n2.<iframe>的缺点：\n\n\n    *iframe会阻塞主页面的Onload事件；\n\n    *即时内容为空，加载也需要时间\n    *没有语意 \n如何实现浏览器内多个标签页之间的通信?\n\n调用localstorge、cookies等本地存储方式\nwebSocket如何兼容低浏览器？\n\nAdobe Flash Socket 、 ActiveX HTMLFile (IE) 、 基于 multipart 编码发送 XHR 、 基于长轮询的 XHR\n线程与进程的区别\n\n一个程序至少有一个进程,一个进程至少有一个线程. \n线程的划分尺度小于进程，使得多线程程序的并发性高。 \n另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 \n线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 \n从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。\n你如何对网站的文件和资源进行优化？\n\n期待的解决方案包括：\n 文件合并\n 文件最小化/文件压缩\n 使用 CDN 托管\n 缓存的使用（多个域名来提供缓存）\n 其他\n请说出三种减少页面加载时间的方法。\n\n1.优化图片 \n 2.图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方） \n 3.优化CSS（压缩合并css，如margin-top,margin-left...) \n 4.网址后加斜杠（如www.campr.com/目录，会判断这个“目录是什么文件类型，或者是目录。） \n 5.标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。 \n当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。） \n\n","content":"<h4 id=\"前端学习分享\"><a href=\"#前端学习分享\" class=\"headerlink\" title=\"前端学习分享\"></a>前端学习分享</h4><p>1.谈谈Cookie的弊端</p>\n<p>cookie虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的。<br><a id=\"more\"></a><br>第一：每个特定的域名下最多生成20个cookie<br>1.IE6或更低版本最多20个cookie<br>2.IE7和之后的版本最后可以有50个cookie。<br>3.Firefox最多50个cookie<br>4.chrome和Safari没有做硬性限制<br>IE和Opera 会清理近期最少使用的cookie，Firefox会随机清理cookie。</p>\n<!--more-->\n<p>cookie的最大大约为4096字节，为了兼容性，一般不能超过4095字节。<br>IE 提供了一种存储可以持久化用户数据，叫做uerData，从IE5.0就开始支持。每个数据最多128K，每个域名下最多1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。<br>优点：极高的扩展性和可用性<br>1.通过良好的编程，控制保存在cookie中的session对象的大小。<br>2.通过加密和安全传输技术（SSL），减少cookie被破解的可能性。<br>3.只在cookie中存放不敏感数据，即使被盗也不会有重大损失。<br>4.控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。</p>\n<p>缺点：<br>1.<code>Cookie</code>数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。</p>\n<p>2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。</p>\n<p>3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。<br>2.浏览器本地存储</p>\n<p>在较高版本的浏览器中，js提供了sessionStorage和globalStorage。在HTML5中提供了localStorage来取代globalStorage。<br>html5中的Web Storage包括了两种存储方式：sessionStorage和localStorage。<br>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。<br>而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br>3.web storage和cookie的区别</p>\n<p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。<br>但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生<br>浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。<br>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等<br>CSS 相关问题</p>\n<p>display:none和visibility:hidden的区别？<br>display:none  隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，<br>就当他从来不存在。</p>\n<p>visibility:hidden  隐藏对应的元素，但是在文档布局中仍保留原来的空间。<br>CSS中 link 和@import 的区别是？<br>A：(1) link属于HTML标签，而@import是CSS提供的; (2) 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;(3) import只在IE5以上才能识别，而link是HTML标签，无兼容问题; (4) link方式的样式的权重 高于@import的权重.<br>position的absolute与fixed共同点与不同点<br>A：共同点：<br>1.改变行内元素的呈现方式，display被置为block；2.让元素脱离普通流，不占据空间；3.默认会覆盖到非定位元素上</p>\n<p>B不同点：<br>absolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。<br>介绍一下CSS的盒子模型？<br>1）有两种， IE 盒子模型、标准 W3C 盒子模型；IE的content部分包含了 border 和 pading;</p>\n<p>2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).<br>CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</p>\n<ul>\n<li><p>1.id选择器（<br> 2.类选择器（.myclassname）<br> 3.标签选择器（div, h1, p）<br> 4.相邻选择器（h1 + p）<br> 5.子选择器（ul &lt; li）<br> 6.后代选择器（li a）<br> 7.通配符选择器（ * ）<br> 8.属性选择器（a[rel = “external”]）<br> 9.伪类选择器（a: hover, li: nth - child）</p>\n<ul>\n<li><p>可继承的样式： font-size font-family color, ULLIDLDDDT;</p>\n</li>\n<li><p>不可继承的样式：border padding margin width height ;</p>\n</li>\n<li><p>优先级就近原则，同权重情况下样式定义最近者为准;</p>\n</li>\n<li><p>载入样式以最后载入的定位为准;</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>优先级为:</p>\n<p>   !important &gt;  id &gt; class &gt; tag  </p>\n<p>   important 比 内联优先级高</p>\n<p>CSS3新增伪类举例：</p>\n<p>p:first-of-type 选择属于其父元素的首个<br> 元素的每个<br> 元素。p:last-of-type  选择属于其父元素的最后<br> 元素的每个<br> 元素。p:only-of-type  选择属于其父元素唯一的<br> 元素的每个<br> 元素。p:only-child    选择属于其父元素的唯一子元素的每个<br> 元素。<br>p:nth-child(2)  选择属于其父元素的第二个子元素的每个<br> 元素。<br>:enabled  :disabled 控制表单控件的禁用状态。<br>:checked        单选框或复选框被选中。<br>列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？</p>\n<ol>\n<li><p>block 象块类型元素一样显示。<br>none 缺省值。象行内元素类型一样显示。<br>inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。<br>list-item 象块类型元素一样显示，并添加样式列表标记。</p>\n<ol>\n<li>*absolute<br>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。 </li>\n</ol>\n<p>*fixed （老IE不支持）<br>   生成绝对定位的元素，相对于浏览器窗口进行定位。 </p>\n<p>*relative<br>   生成相对定位的元素，相对于其正常位置进行定位。 </p>\n<ul>\n<li><p>static  默认值。没有定位，元素出现在正常的流中<br>*（忽略 top, bottom, left, rightz-index 声明）。</p>\n</li>\n<li><p>inherit 规定从父元素继承 position 属性的值。<br>CSS3有哪些新特性？<br>CSS3实现圆角（border-radius:8px），阴影（box-shadow:10px），<br>对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）<br>transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);<br>增加了更多的CSS选择器  多背景 rgba<br>对BFC规范的理解？<br>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。<br>（W3C CSS 2.1 规范中的一个概念,它决定了元素如何对其内容进行定位,以及与其他元素的关 系和相互作用。）<br>解释下 CSS sprites，以及你要如何在页面或网站中使用它。<br>CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片的位置。<br>html部分</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>说说你对语义化的理解？<br>用正确的标签做正确的事情！<br>html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；<br>在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。<br>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。<br>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?<br>（1）、&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。 </html></p>\n<p>（2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。</p>\n<p>（3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</p>\n<p>（4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。<br>你知道多少种Doctype文档类型？<br> 该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。<br> HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。<br> XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。<br>Standards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks<br> （包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。<br>HTML与XHTML——二者有什么区别</p>\n<p>区别：<br>1.所有的标记都必须要有一个相应的结束标记<br>2.所有标签的元素和属性的名字都必须使用小写<br>3.所有的XML标记都必须合理嵌套<br>4.所有的属性必须用引号””括起来<br>5.把所有&lt;和&amp;特殊符号用编码表示<br>6.给所有属性赋一个值<br>7.不要在注释内容中使“–”8.图片必须有说明文字<br>常见兼容性问题？</p>\n<ul>\n<li><p>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</p>\n</li>\n<li><p>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。</p>\n</li>\n<li><p>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。 </p>\n</li>\n<li><p>浮动ie产生的双倍距离（IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。）<br>#box{ float:left; width:10px; margin:000100px;} </p>\n<p>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<em>display:inline;将其转化为行内属性。(</em>这个符号只有ie6会识别)</p>\n</li>\n<li><p>渐进识别的方式，从总体中逐渐排除局部。 </p>\n<p>首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。<br>接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</p>\n<p>css.bb{</p>\n<pre><code>background-color:#f1ee18;\n</code></pre><p>   .background-color:#00deff\\9;<br>   +background-color:#a200ff;<br>   _background-color:#1e0bd1;<br>   } </p>\n</li>\n<li><p>IE下,可以使用获取常规属性的方法来获取自定义属性,<br>也可以使用getAttribute()获取自定义属性;<br>Firefox下,只能使用getAttribute()获取自定义属性.<br>解决方法:统一通过getAttribute()获取自定义属性.</p>\n</li>\n<li><p>IE下,event对象有x,y属性,但是没有pageX,pageY属性;<br>Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.</p>\n</li>\n<li><p>解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</p>\n</li>\n<li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,<br>可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.</p>\n</li>\n<li><p>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:<br>L-V-H-A :  a:link{}a:visited{}a:hover{}a:active{}</p>\n</li>\n<li><p>怪异模式问题：漏写DTD声明，Firefox仍然会按照标准模式来解析网页，但在IE中会触发怪异模式。为避免怪异模式给我们带来不必要的麻烦，最好养成书写DTD声明的好习惯。</p>\n</li>\n<li><p>上下margin重合问题<br>ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。<br>解决方法，养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。</p>\n</li>\n<li>ie6对png图片格式支持不好(引用一段脚本处理)<br>解释下浮动和它的工作原理？清除浮动的技巧<br>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。</li>\n</ul>\n<p>1.使用空标签清除浮动。<br>   这种方法是在所有浮动标签后面添加一个空标签 定义cssclear:both. 弊端就是增加了无意义标签。<br>2.使用overflow。<br>   给包含浮动元素的父标签添加css属性 overflow:auto; zoom:1; zoom:1用于兼容IE6。<br>3.使用after伪对象清除浮动。<br>   该方法只适用于非IE浏览器。具体写法可参照以下示例。使用中需注意以下几点。一、该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；<br>浮动元素引起的问题和解决办法？<br>浮动元素引起的问题：<br>（1）父元素的高度无法被撑开，影响与父元素同级的元素<br>（2）与浮动元素同级的非浮动元素会跟随其后<br>（3）若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构<br>解决方法：<br>使用CSS中的clear:both;属性来清除元素的浮动可解决2、3问题，对于问题1，添加如下样式，给父元素添加clearfix样式：<br>.clearfix:after{content:”.”;display: block;height:0;clear: both;visibility: hidden;}.clearfix{display: inline-block;}<br>清除浮动的几种方法：<br>1，额外标签法，<divstyle=\"clear:both;\"><br>（缺点：不过这个办法会增加额外的标签使HTML结构看起来不够简洁。）2，使用after伪类 content:”.”; height:0; visibility:hidden; display:block; clear:both; }3,浮动外部元素4,设置<code>overflow</code>为<code>hidden</code>或者autoIE 8以下版本的浏览器中的盒模型有什么不同<br>IE8以下浏览器的盒模型中定义的元素的宽高不包括内边距和边框<br>DOM操作——怎样添加、移除、移动、复制、创建和查找节点。<br>（1）创建新节点</divstyle=\"clear:both;\"></p>\n<pre><code>createDocumentFragment()createElement()createTextNode()   \n</code></pre><p>（2）添加、移除、替换、插入</p>\n<pre><code>appendChild()removeChild()replaceChild()insertBefore() \n</code></pre><p>（3）查找</p>\n<pre><code>getElementsByTagName()getElementsByName()getElementById()\n</code></pre><p>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</p>\n<ul>\n<li><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>\n</li>\n<li><p>绘画 canvas<br>用于媒介回放的 video 和 audio 元素<br>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；<br>sessionStorage 的数据在浏览器关闭后自动删除</p>\n<p>语意化更好的内容元素，比如 article、footer、header、nav、section<br>表单控件，calendar、date、time、email、url、search<br>新的技术webworker, websockt, Geolocation</p>\n</li>\n<li><p>移除的元素</p>\n</li>\n</ul>\n<p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>\n<p>对可用性产生负面影响的元素：frame，frameset，noframes；</p>\n<p>支持HTML5新标签：</p>\n<ul>\n<li><p>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，</p>\n<p>浏览器支持新标签后，还需要添加标签默认的样式：</p>\n</li>\n<li><p>当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</p>\n</li>\n</ul>\n<p>如何区分： DOCTYPE声明\\新增的结构元素\\功能元素<br>iframe的优缺点？</p>\n<p>1.<iframe>优点：</iframe></p>\n<pre><code>解决加载缓慢的第三方内容如图标和广告等的加载问题\nSecurity sandbox\n并行加载脚本\n</code></pre><p>2.<iframe>的缺点：</iframe></p>\n<pre><code>*iframe会阻塞主页面的Onload事件；\n\n*即时内容为空，加载也需要时间\n*没有语意 \n</code></pre><p>如何实现浏览器内多个标签页之间的通信?</p>\n<p>调用localstorge、cookies等本地存储方式<br>webSocket如何兼容低浏览器？</p>\n<p>Adobe Flash Socket 、 ActiveX HTMLFile (IE) 、 基于 multipart 编码发送 XHR 、 基于长轮询的 XHR<br>线程与进程的区别</p>\n<p>一个程序至少有一个进程,一个进程至少有一个线程.<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。<br>你如何对网站的文件和资源进行优化？</p>\n<p>期待的解决方案包括：<br> 文件合并<br> 文件最小化/文件压缩<br> 使用 CDN 托管<br> 缓存的使用（多个域名来提供缓存）<br> 其他<br>请说出三种减少页面加载时间的方法。</p>\n<p>1.优化图片<br> 2.图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）<br> 3.优化CSS（压缩合并css，如margin-top,margin-left…)<br> 4.网址后加斜杠（如www.campr.com/目录，会判断这个“目录是什么文件类型，或者是目录。）<br> 5.标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。<br>当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。） </p>\n","tags":[{"name":"cookies","slug":"cookies","permalink":"http://yoursite.com/tags/cookies/"},{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]}]