[{"title":"juc之java并发编程","date":"2017-07-28T07:08:32.000Z","path":"2017/07/28/juc/","raw":"---\ntitle: juc之java并发编程\ndate: 2017-07-28 15:08:32\ncategories:\ntags:\n     - volatile\n     - Thread\n---\n# juc之java并发编程\n<!--more-->\n\n## 内存可见性问题\n\n\n```\npublic class TestVolatile {\n\n    public static void main(String[] args){\n        ThreadDemo threadDemo=new ThreadDemo();\n        new Thread(threadDemo).start();\n        while (true){\n            if(threadDemo.getFlag()){\n                System.out.println(Thread.currentThread().getName()+threadDemo.getFlag()+\"========\");\n            }\n        }\n\n    }\n\n}\nclass ThreadDemo implements Runnable{\n    private Boolean flag=false;\n\n    public Boolean getFlag() {\n        return flag;\n    }\n\n    public void setFlag(Boolean flag) {\n        this.flag = flag;\n    }\n\n    @Override\n    public void run() {\n        try {\n            Thread.sleep(2000);\n            flag=true;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        if(flag){\n            System.out.println(Thread.currentThread().getName()+flag+\"======\");\n        }\n    }\n}\n\n```\n==运行结果如下==\n\n![image](https://note.youdao.com/yws/api/personal/file/A9BC0422BC554ECB8F5AF10828302476?method=download&shareKey=2c4e8c80fa816ad6cebb126e35dd99af)\n\n**主线程中始终不会输出此时就出现了线程间的内存可见性问题**\n![image](https://note.youdao.com/yws/api/personal/file/4340C8465BF042D3A62E62B4C3352839?method=download&shareKey=a8e4643f245348a119349385900d16dc)","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h1 id=\"juc之java并发编程\"><a href=\"#juc之java并发编程\" class=\"headerlink\" title=\"juc之java并发编程\"></a>juc之java并发编程</h1><a id=\"more\"></a>\n<h2 id=\"内存可见性问题\"><a href=\"#内存可见性问题\" class=\"headerlink\" title=\"内存可见性问题\"></a>内存可见性问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TestVolatile &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        ThreadDemo threadDemo=new ThreadDemo();</div><div class=\"line\">        new Thread(threadDemo).start();</div><div class=\"line\">        while (true)&#123;</div><div class=\"line\">            if(threadDemo.getFlag())&#123;</div><div class=\"line\">                System.out.println(Thread.currentThread().getName()+threadDemo.getFlag()+&quot;========&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">class ThreadDemo implements Runnable&#123;</div><div class=\"line\">    private Boolean flag=false;</div><div class=\"line\"></div><div class=\"line\">    public Boolean getFlag() &#123;</div><div class=\"line\">        return flag;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setFlag(Boolean flag) &#123;</div><div class=\"line\">        this.flag = flag;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            Thread.sleep(2000);</div><div class=\"line\">            flag=true;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(flag)&#123;</div><div class=\"line\">            System.out.println(Thread.currentThread().getName()+flag+&quot;======&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==运行结果如下==</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/A9BC0422BC554ECB8F5AF10828302476?method=download&amp;shareKey=2c4e8c80fa816ad6cebb126e35dd99af\" alt=\"image\"></p>\n<p><strong>主线程中始终不会输出此时就出现了线程间的内存可见性问题</strong><br><img src=\"https://note.youdao.com/yws/api/personal/file/4340C8465BF042D3A62E62B4C3352839?method=download&amp;shareKey=a8e4643f245348a119349385900d16dc\" alt=\"image\"></p>\n","tags":[{"name":"volatile","slug":"volatile","permalink":"http://yoursite.com/tags/volatile/"},{"name":"Thread","slug":"Thread","permalink":"http://yoursite.com/tags/Thread/"}]},{"title":"多线程poi导出demo","date":"2017-07-22T07:08:32.000Z","path":"2017/07/22/多线程poi导出/","raw":"---\ntitle: 多线程poi导出demo\ndate: 2017-07-22 15:08:32\ncategories:\ntags:\n     - ExecutorService\n     - Thread\n---\n\n####  多线程poi导出\n<!--more-->\n\n```java\npublic class ExportTest {\n\tprivate final static Object object = new Object();\n\n    public static void main(String[] args) {\n    \tSystem.out.println(\"开始\");\n    \tlong startTime=System.currentTimeMillis();\n        //处理器核心数\n        int processor = Runtime.getRuntime().availableProcessors();\n        //XSSFWorkbook 一次只能写入六万多条数据，所以这里最好使用SXSSFWorkbook\n        SXSSFWorkbook workBook = new SXSSFWorkbook();\n        //创建格式\n        CellStyle style = workBook.createCellStyle();\n        //居中格式\n        style.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n        //手工创建线程池\n        ExecutorService executorService = new ThreadPoolExecutor(processor, processor, 1000,\n        \t\tTimeUnit.MILLISECONDS, new LinkedBlockingDeque(),new BasicThreadFactory.Builder()\n                .namingPattern(\"poi-task-%d\")\n                .priority(Thread.MAX_PRIORITY)\n                .build());\n        //计数器 等待线程池中的线程执行完毕\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        for (int i = 0; i < 1; i++) {\n            int sheetId = i;\n            //放入线程池中\n            executorService.execute(new ExportThread(workBook, style, sheetId, countDownLatch));\n        }\n        try {\n            //等待所有线程执行完毕\n            countDownLatch.await();\n            executorService.shutdown();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        FileOutputStream fou = null;\n        try {\n            fou = new FileOutputStream(\"D:\\\\multiSheetNew.xlsx\");\n            workBook.write(fou);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (fou != null) {\n                try {\n                    fou.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        System.out.println(\"总共耗时\"+(System.currentTimeMillis()-startTime)/1000+\"s\");\n    }\n    \n}\nclass ExportThread implements Runnable{\n\tprivate final static Object object = new Object();\n\tSXSSFWorkbook workBook; CellStyle style; int sheetId; CountDownLatch countDownLatch; \n        \n\tpublic ExportThread(SXSSFWorkbook workBook, CellStyle style, int sheetId, CountDownLatch countDownLatch) {\n       this.workBook=workBook;\n       this.style=style;\n       this.sheetId=sheetId;\n       this.countDownLatch=countDownLatch;\n\t}\n\t@Override\n\tpublic void run() {\n\t\ttry {\n            SXSSFSheet hSSFSheet = null;\n            //这个地方一定要加锁，要不然会出现问题\n            synchronized (object) {\n                //创建sheet页\n                hSSFSheet = (SXSSFSheet) workBook.createSheet();\n            }\n            //hSSFSheet=getSXSSFSheet(workBook,sheetId);\n            //创建一行\n            SXSSFRow hssfRow = (SXSSFRow) hSSFSheet.createRow(0);\n            SXSSFCell hssfCell = (SXSSFCell) hssfRow.createCell(0);\n            hssfCell.setCellStyle(style);\n            hssfCell.setCellValue(\"第\" + sheetId + \"个sheet页，第一行，第一个单元格\");\n\n            hssfCell = (SXSSFCell) hssfRow.createCell(1);\n            hssfCell.setCellStyle(style);\n            hssfCell.setCellValue(\"第\" + sheetId + \"个sheet页，第一行，第二个单元格\");\n\n            hssfCell = (SXSSFCell) hssfRow.createCell(2);\n            hssfCell.setCellStyle(style);\n            hssfCell.setCellValue(\"第\" + sheetId + \"个sheet页，第一行，第三个单元格\");\n            SXSSFRow hssfRows;\n            SXSSFCell hSSFCells;\n            for (int i = 1; i < 100000; i++) {\n                hssfRows = (SXSSFRow) hSSFSheet.createRow(i);\n                hSSFCells = (SXSSFCell) hssfRows.createCell(0);\n                hSSFCells.setCellStyle(style);\n                hSSFCells.setCellValue(\"第\" + sheetId + \"个sheet页，第\" + (i + 1) + \"行，第一个单元格\");\n\n                hSSFCells = (SXSSFCell) hssfRows.createCell(1);\n                hSSFCells.setCellStyle(style);\n                hSSFCells.setCellValue(\"第\" + sheetId + \"个sheet页，第一个单元格\");\n\n                hSSFCells = (SXSSFCell) hssfRows.createCell(2);\n                hSSFCells.setCellStyle(style);\n                hSSFCells.setCellValue(\"第\" + sheetId + \"个sheet页，第一个单元格\");\n                \n                hSSFCells = (SXSSFCell) hssfRows.createCell(3);\n                hSSFCells.setCellStyle(style);\n                hSSFCells.setCellValue(\"第\" + sheetId + \"个sheet页，第一个单元格\");\n                \n            }\n        } finally {\n            //计数器减一\n            countDownLatch.countDown();\n        }\n\t}\n```\n\n","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h4 id=\"多线程poi导出\"><a href=\"#多线程poi导出\" class=\"headerlink\" title=\"多线程poi导出\"></a>多线程poi导出</h4><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExportTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Object object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    \tSystem.out.println(<span class=\"string\">\"开始\"</span>);</div><div class=\"line\">    \t<span class=\"keyword\">long</span> startTime=System.currentTimeMillis();</div><div class=\"line\">        <span class=\"comment\">//处理器核心数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> processor = Runtime.getRuntime().availableProcessors();</div><div class=\"line\">        <span class=\"comment\">//XSSFWorkbook 一次只能写入六万多条数据，所以这里最好使用SXSSFWorkbook</span></div><div class=\"line\">        SXSSFWorkbook workBook = <span class=\"keyword\">new</span> SXSSFWorkbook();</div><div class=\"line\">        <span class=\"comment\">//创建格式</span></div><div class=\"line\">        CellStyle style = workBook.createCellStyle();</div><div class=\"line\">        <span class=\"comment\">//居中格式</span></div><div class=\"line\">        style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</div><div class=\"line\">        <span class=\"comment\">//手工创建线程池</span></div><div class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(processor, processor, <span class=\"number\">1000</span>,</div><div class=\"line\">        \t\tTimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> LinkedBlockingDeque(),<span class=\"keyword\">new</span> BasicThreadFactory.Builder()</div><div class=\"line\">                .namingPattern(<span class=\"string\">\"poi-task-%d\"</span>)</div><div class=\"line\">                .priority(Thread.MAX_PRIORITY)</div><div class=\"line\">                .build());</div><div class=\"line\">        <span class=\"comment\">//计数器 等待线程池中的线程执行完毕</span></div><div class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> sheetId = i;</div><div class=\"line\">            <span class=\"comment\">//放入线程池中</span></div><div class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> ExportThread(workBook, style, sheetId, countDownLatch));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//等待所有线程执行完毕</span></div><div class=\"line\">            countDownLatch.await();</div><div class=\"line\">            executorService.shutdown();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        FileOutputStream fou = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            fou = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\multiSheetNew.xlsx\"</span>);</div><div class=\"line\">            workBook.write(fou);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (fou != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    fou.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"总共耗时\"</span>+(System.currentTimeMillis()-startTime)/<span class=\"number\">1000</span>+<span class=\"string\">\"s\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExportThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Object object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\tSXSSFWorkbook workBook; CellStyle style; <span class=\"keyword\">int</span> sheetId; CountDownLatch countDownLatch; </div><div class=\"line\">        </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExportThread</span><span class=\"params\">(SXSSFWorkbook workBook, CellStyle style, <span class=\"keyword\">int</span> sheetId, CountDownLatch countDownLatch)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.workBook=workBook;</div><div class=\"line\">       <span class=\"keyword\">this</span>.style=style;</div><div class=\"line\">       <span class=\"keyword\">this</span>.sheetId=sheetId;</div><div class=\"line\">       <span class=\"keyword\">this</span>.countDownLatch=countDownLatch;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            SXSSFSheet hSSFSheet = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"comment\">//这个地方一定要加锁，要不然会出现问题</span></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (object) &#123;</div><div class=\"line\">                <span class=\"comment\">//创建sheet页</span></div><div class=\"line\">                hSSFSheet = (SXSSFSheet) workBook.createSheet();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//hSSFSheet=getSXSSFSheet(workBook,sheetId);</span></div><div class=\"line\">            <span class=\"comment\">//创建一行</span></div><div class=\"line\">            SXSSFRow hssfRow = (SXSSFRow) hSSFSheet.createRow(<span class=\"number\">0</span>);</div><div class=\"line\">            SXSSFCell hssfCell = (SXSSFCell) hssfRow.createCell(<span class=\"number\">0</span>);</div><div class=\"line\">            hssfCell.setCellStyle(style);</div><div class=\"line\">            hssfCell.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第一行，第一个单元格\"</span>);</div><div class=\"line\"></div><div class=\"line\">            hssfCell = (SXSSFCell) hssfRow.createCell(<span class=\"number\">1</span>);</div><div class=\"line\">            hssfCell.setCellStyle(style);</div><div class=\"line\">            hssfCell.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第一行，第二个单元格\"</span>);</div><div class=\"line\"></div><div class=\"line\">            hssfCell = (SXSSFCell) hssfRow.createCell(<span class=\"number\">2</span>);</div><div class=\"line\">            hssfCell.setCellStyle(style);</div><div class=\"line\">            hssfCell.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第一行，第三个单元格\"</span>);</div><div class=\"line\">            SXSSFRow hssfRows;</div><div class=\"line\">            SXSSFCell hSSFCells;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</div><div class=\"line\">                hssfRows = (SXSSFRow) hSSFSheet.createRow(i);</div><div class=\"line\">                hSSFCells = (SXSSFCell) hssfRows.createCell(<span class=\"number\">0</span>);</div><div class=\"line\">                hSSFCells.setCellStyle(style);</div><div class=\"line\">                hSSFCells.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第\"</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行，第一个单元格\"</span>);</div><div class=\"line\"></div><div class=\"line\">                hSSFCells = (SXSSFCell) hssfRows.createCell(<span class=\"number\">1</span>);</div><div class=\"line\">                hSSFCells.setCellStyle(style);</div><div class=\"line\">                hSSFCells.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第一个单元格\"</span>);</div><div class=\"line\"></div><div class=\"line\">                hSSFCells = (SXSSFCell) hssfRows.createCell(<span class=\"number\">2</span>);</div><div class=\"line\">                hSSFCells.setCellStyle(style);</div><div class=\"line\">                hSSFCells.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第一个单元格\"</span>);</div><div class=\"line\">                </div><div class=\"line\">                hSSFCells = (SXSSFCell) hssfRows.createCell(<span class=\"number\">3</span>);</div><div class=\"line\">                hSSFCells.setCellStyle(style);</div><div class=\"line\">                hSSFCells.setCellValue(<span class=\"string\">\"第\"</span> + sheetId + <span class=\"string\">\"个sheet页，第一个单元格\"</span>);</div><div class=\"line\">                </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//计数器减一</span></div><div class=\"line\">            countDownLatch.countDown();</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n","tags":[{"name":"Thread","slug":"Thread","permalink":"http://yoursite.com/tags/Thread/"},{"name":"ExecutorService","slug":"ExecutorService","permalink":"http://yoursite.com/tags/ExecutorService/"}]},{"title":"github搭建博客优点","date":"2016-07-22T07:08:32.000Z","path":"2016/07/22/my-first-blog/","raw":"---\ntitle: github搭建博客优点\ndate: 2016-07-22 15:08:32\ncategories:\ntags:\n     - 黑魔法\n     - 奇淫技巧\n---\n#### 使用github pages服务搭建博客的好处\n<audio loop autoplay style=\"display:none\"><source src=\"https://m10.music.126.net/20180812133557/7f1bd26fe1cd59464258c788dafbc850/ymusic/d056/ad38/5e3b/4785d523b573a83485ba3b328793edde.mp3\" type=\"audio/mpeg\" ></audio>\n<!--more-->\n1. 全是静态文件，11访问速度快；\n2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；\n3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；\n4.  数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；\n5.  博客内容可以轻松打包、转移、发布到其它平台；\n6. 等等；\n\n\n\n\n","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h4 id=\"使用github-pages服务搭建博客的好处\"><a href=\"#使用github-pages服务搭建博客的好处\" class=\"headerlink\" title=\"使用github pages服务搭建博客的好处\"></a>使用github pages服务搭建博客的好处</h4><p><audio loop autoplay style=\"display:none\"><source src=\"https://m10.music.126.net/20180812133557/7f1bd26fe1cd59464258c788dafbc850/ymusic/d056/ad38/5e3b/4785d523b573a83485ba3b328793edde.mp3\" type=\"audio/mpeg\"></audio><br><a id=\"more\"></a></p>\n<ol>\n<li>全是静态文件，11访问速度快；</li>\n<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>\n<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>\n<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>\n<li>博客内容可以轻松打包、转移、发布到其它平台；</li>\n<li>等等；</li>\n</ol>\n","tags":[{"name":"黑魔法","slug":"黑魔法","permalink":"http://yoursite.com/tags/黑魔法/"},{"name":"奇淫技巧","slug":"奇淫技巧","permalink":"http://yoursite.com/tags/奇淫技巧/"}]}]